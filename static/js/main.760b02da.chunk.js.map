{"version":3,"sources":["math-utils.js","color-utils.js","components/PlayNumber.js","components/StarsDisplay.js","components/PlayAgain.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","colors","available","used","wrong","candidate","PlayNumber","props","key","number","className","style","backgroundColor","status","onClick","StarsDisplay","count","map","starId","PlayAgain","color","gameStatus","fontSize","fontWeight","padding","Game","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","prevSecondsLeft","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","newGame","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.760b02da.chunk.js","sourcesContent":["const utils = {\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n  };\r\n\r\n  export default utils;","const colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n\r\n  export default colors;","import React from 'react';\r\nimport colors from '../color-utils';\r\n\r\nconst PlayNumber = props => (\r\n    <button \r\n    key={props.number} \r\n    className=\"number\"\r\n    style={{\r\n        backgroundColor: colors[props.status]\r\n    }}\r\n    onClick={() => props.onClick(props.number, props.status)}>\r\n        {props.number}\r\n    </button> \r\n)\r\n\r\nexport default PlayNumber;","import React from 'react';\r\nimport utils from '../math-utils';\r\n\r\nconst StarsDisplay = props => (\r\n        <>\r\n          {utils.range(1, props.count).map(starId => (\r\n              <div key={starId} className=\"star\" />    \r\n          ))}\r\n        </>\r\n);\r\n\r\nexport default StarsDisplay;","import React from 'react';\r\n\r\nconst PlayAgain = (props) => (\r\n    <div className=\"game-done\">\r\n        <div \r\n            className=\"message\"\r\n            style={{ color: props.gameStatus === 'lost' ? 'lightcoral' : 'lightgreen'}}\r\n        >\r\n            {props.gameStatus === 'lost' ? 'Game Over' : 'You win!!'}\r\n        </div>\r\n        <button \r\n        onClick={props.onClick}\r\n        style = {{\r\n            backgroundColor: \"lightblue\",\r\n            fontSize: \"20px\",\r\n            fontWeight: \"bold\",\r\n            padding: \"10px\"\r\n        }}>Play Again</button>\r\n    </div>\r\n)\r\n\r\nexport default PlayAgain;\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport './StarMatch.css';\r\nimport utils from '../math-utils';\r\nimport PlayNumber from './PlayNumber';\r\nimport StarsDisplay from './StarsDisplay';\r\nimport PlayAgain from './PlayAgain';\r\n\r\nconst useGameState = () => {\r\n  const [stars, setStars] = useState(utils.random(1, 9));\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n  const [candidateNums, setCandidateNums] = useState([]);\r\n  const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n  useEffect(() => {\r\n    if (secondsLeft > 0 && availableNums.length > 0) {\r\n      const timerId = setTimeout(\r\n        () => setSecondsLeft((prevSecondsLeft) => prevSecondsLeft - 1),\r\n        1000\r\n      );\r\n      return () => clearTimeout(timerId);\r\n    }\r\n  }, [secondsLeft, availableNums]);\r\n\r\n  const setGameState = (newCandidateNums) => {\r\n    if (utils.sum(newCandidateNums) !== stars) {\r\n      setCandidateNums(newCandidateNums);\r\n    } else {\r\n      const newAvailableNums = availableNums.filter(\r\n        (n) => !newCandidateNums.includes(n)\r\n      );\r\n      setStars(utils.randomSumIn(newAvailableNums, 9));\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([]);\r\n    }\r\n  };\r\n\r\n  return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n};\r\n\r\nconst Game = (props) => {\r\n  const {\r\n    stars,\r\n    availableNums,\r\n    candidateNums,\r\n    secondsLeft,\r\n    setGameState,\r\n  } = useGameState();\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n    const gameStatus = \r\n      availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost' : 'active';\r\n\r\n    const numberStatus = (number) => {\r\n        if (!availableNums.includes(number)){\r\n            return 'used';\r\n        }\r\n\r\n        if (candidateNums.includes(number)){\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n\r\n        return 'available';\r\n    };\r\n\r\n    const onNumberClick = (number, currentStatus) => {\r\n      if (currentStatus === 'used' || secondsLeft === 0){\r\n        return;\r\n      }\r\n\r\n      const newCandidateNums = \r\n        currentStatus === 'available'\r\n          ? candidateNums.concat(number)\r\n          : candidateNums.filter((cn) => cn !== number);\r\n      \r\n      setGameState(newCandidateNums);\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n          <h1>Star Match Game</h1>\r\n        <div className=\"help\">\r\n          Pick 1 or more numbers that sum to the number of stars\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"left\">\r\n            {gameStatus !== 'active' ? (\r\n              <PlayAgain onClick={props.newGame} gameStatus={gameStatus}/>\r\n              ) : (\r\n                <StarsDisplay count={stars} />\r\n              )}        \r\n          </div>\r\n          <div className=\"right\">\r\n            {utils.range(1, 9).map((number) => (\r\n                <PlayNumber \r\n                key={number} \r\n                number={number}\r\n                status={numberStatus(number)} \r\n                onClick={onNumberClick}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Game;\r\n\r\n\r\n","import React from 'react';\r\nimport StarMatch from './components/Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <StarMatch />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}